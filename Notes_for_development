Model-view-controller architectural pattern
    - used for developing user interfaces
    - separation of functionality
    - simultaneous development
    - CONTROLLER controls MODEL
    - MODEL updates VIEW
    - User action between VIEW and CONTROLLER

Main window:
    - MenuBar -> different menus
        - MenuItem
    - TreeView -> email folders
    - TableView -> email messages
    - WebView -> read emails

Communication between controllers:
    1. Singleton
    - The Singleton architecture is to add a new class called 'Singleton'
      to realize the communication between all controllers.
    - Not using the Singleton architecture as it will grow larger and larger
      and become very hard to maintain

    2. Abstract controller
    - Email manager
    - View factory

Implement view options:
    - Enums
    - Keep the program state
    - Observable values -> view directly updates

CSS styles - applied to scenes -> list of scenes

JavaMail jar
    - Download javamail jar from the Internet
Activation jar
    - Download activation jar from the Internet
Add the two jar as libraries to the project
An email address (test gmail account with less secure apps access)
    - Don't use your personal email address

EmailAccount class - holds data used by app
    - account properties for IMAP(sending) and SMTP(receiving)
Login service class - actual logic

